# -*- coding: utf-8 -*-
"""Security_Master.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kYLCU7ZG98S5gqPjQZCFljpglsdm7u0l

## Security Master Table
"""

"""
This script loads and validates security master data from an Excel file
and inserts it into the SECURITY_MASTER table in Snowflake. This table
serves as the foundation for portfolio and holdings logic, ensuring that
each security has consistent metadata used throughout the broader pipeline.
"""

# Step 1: Install required packages (for Google Colab)
!pip install --quiet snowflake-connector-python python-dotenv
!pip install --quiet yfinance

# Step 2: Import necessary libraries
import os
import pandas as pd
import numpy as np
import snowflake.connector
from dotenv import load_dotenv
from google.colab import files

# Step 3: Upload and load .env file containing Snowflake credentials
uploaded = files.upload()

# Rename the uploaded .env file if needed
if os.path.exists(".env.txt"):
    os.rename(".env.txt", ".env")
elif os.path.exists(".env (2).txt"):
    os.rename(".env (2).txt", ".env")

# Load environment variables
load_dotenv()

# Step 4: Connect to Snowflake using environment variables
try:
    conn = snowflake.connector.connect(
        user=os.getenv("SNOWFLAKE_USER"),
        password=os.getenv("SNOWFLAKE_PASSWORD"),
        account=os.getenv("SNOWFLAKE_ACCOUNT"),
        role=os.getenv("SNOWFLAKE_ROLE"),
        warehouse=os.getenv("SNOWFLAKE_WAREHOUSE"),
        database=os.getenv("SNOWFLAKE_DATABASE"),
        schema=os.getenv("SNOWFLAKE_SCHEMA")
    )
    cur = conn.cursor()
    print("Connected to Snowflake successfully.")
except Exception as e:
    raise ConnectionError(f"Snowflake connection failed: {e}")

# Step 5: Upload Excel file containing the security master data
uploaded = files.upload()
excel_files = [f for f in uploaded if f.endswith(".xlsx")]

if not excel_files:
    raise FileNotFoundError("No Excel file found for upload.")

# Load Excel into DataFrame
df = pd.read_excel(excel_files[0])
print(f"Excel file loaded with {len(df)} rows.")

# Step 6: Validate file structure and required columns
required_columns = {"Ticker", "Name", "Region", "Sector", "Industry"}
df.columns = df.columns.str.strip()  # Clean column names

missing_columns = required_columns - set(df.columns)
if missing_columns:
    raise ValueError(f"Missing required columns: {missing_columns}")

if df["Ticker"].isnull().any():
    raise ValueError("Ticker column contains null values.")

# Replace NaN with None for Snowflake compatibility
df = df.where(pd.notnull(df), None)

# Step 7: Create or replace the SECURITY_MASTER table
create_table_stmt = """
CREATE OR REPLACE TABLE SECURITY_MASTER (
    TICKER STRING,
    NAME STRING,
    REGION STRING,
    SECTOR STRING,
    INDUSTRY STRING
)
"""
cur.execute(create_table_stmt)
print("SECURITY_MASTER table created or replaced.")

# Step 8: Insert cleaned records into SECURITY_MASTER
insert_stmt = """
INSERT INTO SECURITY_MASTER (TICKER, NAME, REGION, SECTOR, INDUSTRY)
VALUES (%s, %s, %s, %s, %s)
"""

rows_inserted = 0

for _, row in df.iterrows():
    try:
        cur.execute(insert_stmt, (
            row["Ticker"],
            row["Name"],
            row["Region"],
            row["Sector"],
            row["Industry"]
        ))
        rows_inserted += 1
    except Exception as e:
        print(f"Insert failed for {row['Ticker']}: {e}")

print(f"{rows_inserted} rows successfully inserted into SECURITY_MASTER.")

# Step 9: Close Snowflake connection
cur.close()
conn.close()
print("Snowflake connection closed.")